function [res, p_test, Jrows,Jcols, Hrows,Hcols] = ...
    brightness_error_vec(var_vec, sz_vec, observations, ...
                         f_clear_persistent)

if (nargin==0 && nargout==0), test(); return; end

if ~exist('f_clear_persistent','var'), f_clear_persistent = false; end

persistent Ix;
persistent Iy;
persistent It;
persistent cached_p;

if f_clear_persistent,
    clear('Ix','Iy','It','cached_p');
    return;
end

% cached_p = [];

variables = ncm_unpack(var_vec, sz_vec);
[p, wts, stackSize, uu, vv] = get_params_from_vec(observations, variables);

nImages = stackSize(3);

nObservations = sum(observations.obsMask(:));

% Add zero displacement for first frame
p.displacements = [0 0; p.displacements];

% If displacement is different from before then we need to recompute (some
% of) the derivatives
if isempty(cached_p) || ...
   any(p.displacements(:) ~= cached_p.displacements(:))
    
    % Find the frames that have changed
    if isempty(cached_p)
        cached_p = p;
        
        % Compute derivatives for every frame.
        % We don't necessarily need to interpolate every (or any) frame but
        % we do need to compute derivatives for every frame.
        some_displacement = any(p.displacements ~= 0, 2);
        frames_to_interpolate = find(some_displacement);

        % Define the frames whose derivatives we want to update.
        % i.e. all of them, because cached_p is empty
        frames_to_differentiate = 1:nImages;
    else
        % Compute new derivatives only for those that have changed.
        different_displacement = any(p.displacements ~= cached_p.displacements, 2);
        frames_to_interpolate = find(different_displacement);
        
        % Define the frames whose derivatives we want to update.
        % i.e. frames_to_interpolate, plus one frame either side whose temporal
        % derivative will change.
        frames_to_differentiate = min(frames_to_interpolate)-1 : max(frames_to_interpolate)+1;
        
        % Don't bother interpolating images where displacement is zero
        % (This comes here since the derivatives will need updating for
        % frames where displacement is zero.)
        no_displacement = all(p.displacements(frames_to_interpolate, :) == 0, 2);
        frames_to_interpolate(no_displacement) = [];
    end

    cached_p.displacements = p.displacements;
    
	if ~isempty(frames_to_interpolate)
        % Compute the corrected frames (i.e. registered with the first).
        % Therefore, we interpolate with the negative of the estimated 
        % displacement.
        
        % Interpolate the affected frames using the specified displacement.
        if ~isfield(p, 'imgStackWarped') || ...
           isempty(p.imgStackWarped)
            stacks_out = interpolate_image_stacks({p.imgStack}, ...
                                                  -p.displacements, ...
                                                  frames_to_interpolate);
        else
            stacks_out = interpolate_image_stacks({p.imgStack, p.imgStackWarped}, ...
                                                  -p.displacements, ...
                                                  frames_to_interpolate);
            cached_p.imgStackWarped(:, :, frames_to_interpolate) = stacks_out{2};
        end
        cached_p.imgStack(:, :, frames_to_interpolate) = stacks_out{1};
    end
    
    % Trim any frames that don't exist.
    frames_to_differentiate(frames_to_differentiate < 1) = [];
    frames_to_differentiate(frames_to_differentiate > nImages) = [];

    % Decide which frames need to go to differentiate_stack()
    frame_range = [max(frames_to_differentiate(1)-1, 1) ...
                   frames_to_differentiate ...
                   min(frames_to_differentiate(end)+1, nImages)];
               
    % Remove repeated indices
    % Otherwise, they are adjusted by differentiate_stack() then thrown
    % away.
    first_to_keep = 2;
    if (frame_range(1) == frame_range(2))
        frame_range(1) = [];
        first_to_keep = 1;
    end
    if (frame_range(end) == frame_range(end-1))
        frame_range(end) = [];
    end
               
    % Recompute the derivatives that depend on that frame 
    % (one X, one Y, two T).
    if ~isfield(p, 'imgStackWarped') || ...
       isempty(p.imgStackWarped)
        [Ix_interp, Iy_interp, It_interp] = ...
            differentiate_stack(cached_p.imgStack(:, :, frame_range));
    else
        [Ix_interp, Iy_interp, It_interp] = ...
            differentiate_stack(cached_p.imgStack(:, :, frame_range), ...
                                cached_p.imgStackWarped(:, :, frame_range));
    end
    
    % Replace modified frames in cached derivatives.
    range_to_keep = first_to_keep-1 + (1:length(frames_to_differentiate));
    Ix(:, :, frames_to_differentiate) = Ix_interp(:, :, range_to_keep);
    Iy(:, :, frames_to_differentiate) = Iy_interp(:, :, range_to_keep);
    It(:, :, frames_to_differentiate) = It_interp(:, :, range_to_keep);
end

res = zeros(nObservations,1);
firstObs = 1;
for t = 1:nImages
    valid = observations.obsMask(:,:,t);
    lastObs = firstObs + sum(valid(:)) - 1;
    
    Ix_t = Ix(:,:,t);
    rx   = Ix_t(valid) .* uu(valid);
    
    Iy_t = Iy(:,:,t);
    ry   = Iy_t(valid) .* vv(valid);
    
    It_t = It(:,:,t);
    rt   = It_t(valid);
    
    % Background pixels incur a penalty of p.penalty
    % You therefore need a very good reason to say a pixel is background.
    % Update: This causes weird artefacts so use penalty = 0 for now.
    res(firstObs:lastObs) =      wts(valid)  .* ((rx + ry)*p.f(t) + rt) + ...
                            (1 - wts(valid)) .* p.penalty;
                        
    firstObs = lastObs + 1;
    
%     r = (Ix_t(20,20)*uu(20,20)+Iy_t(20,20)*vv(20,20))+It_t(20,20);
%     disp([Ix_t(20,20) Iy_t(20,20) It_t(20,20) r]);
end

p_test = cached_p;


% Compute locations of nonzero elements of the Jacobian adn Hessian 
% for this vector of residuals
if (nargout >= 4)
    [Jrows, Jcols] = jacobian_elements(var_vec, sz_vec, observations.obsMask);
end
if (nargout >= 6)
    [Hrows, Hcols] = hessian_elements(var_vec, sz_vec, observations.obsMask, ...
                                      Jrows, Jcols);
end


function [rows, cols] = jacobian_elements(var_vec, sz_vec, observationMask)

imsz = size(observationMask);

nPixelsPerImage = imsz(1)*imsz(2);
nImages = imsz(3);

if isempty(observationMask)
    nObservations = nImages*nPixelsPerImage;
else
    obsInds = find(observationMask);
    nObservations = length(obsInds);
    rowmat = zeros(size(observationMask));
    rowmat(obsInds) = 1:nObservations;
end

rows = [];
cols = [];

[vs_names, vt_names] = varnames();
vnames = [vs_names vt_names];

used_var_inds = find(sz_vec ~= 0)';
for iv = 1:length(used_var_inds)
    v = used_var_inds(iv);
    varname = vnames{v};
    
    switch varname
        case {'Q', 'uu', 'vv', 'F', 'theta'},
            % Find the first column (index of the spatial variable) and 
            % spacing between columns (number of spatial variables).
            col0 = iv;
            col_spacing = sum(sz_vec(1:length(vs_names)) ~= 0);
            
            if isempty(observationMask)
                rowmat1 = reshape(1:nObservations, [nPixelsPerImage, nImages])';
            else
                rowmat1 = reshape(rowmat, [nPixelsPerImage, nImages])';
            end
            
            nz_inds = find(rowmat1 ~= 0);

            row_inds = rowmat1(nz_inds);

            pix_inds = ceil(nz_inds / nImages);
%                 col_inds = (col_spacing * (pix_inds - 1)) + col0;
            col_inds = col_spacing*pix_inds + (col0 - col_spacing);

            rows = [rows(:); row_inds(:)];
            cols = [cols(:); col_inds(:)];

        case {'f'},
            % f affects only those frames to which it applies directly

            col0 = sum(sz_vec(1:v-1));
            
            if isempty(observationMask)
            else
                for f = 1:nImages
                    row_submat = rowmat(:,:,f);
                    nz_inds = (row_submat ~= 0);
                    rows = [rows(:); row_submat(nz_inds)];
                    cols = [cols(:); (col0+f)*ones(sum(nz_inds(:)),1)];
                end
            end
            
        case {'displacements'}
            % displacements affect frames immediately before and after 
            % (via the temporal gradients)

            col = sum(sz_vec(1:v-1)) + 1;

            if isempty(observationMask)
            else
                rowvec = zeros(6*nObservations,1);
                colvec = zeros(6*nObservations,1);
                inds = 0;
                
                % Displacement doesn't exist for frame 1...
                % ...but for the final frame, it affects both nImages-1 and
                % nImages
                for f = 2:nImages
                    frames = min(max(f-1:f+1, 1), nImages);
                    frames = unique(frames);
                    
                    row_submat = rowmat(:,:,frames);
                    nz_inds = (row_submat ~= 0);

                    % Displacement in X
                    n_nz = sum(nz_inds(:));
                    inds = inds(end)+1:inds(end)+n_nz;
                    rowvec(inds) = row_submat(nz_inds);
                    colvec(inds) = col * ones(n_nz,1);
                    
                    % Displacement in Y
                    inds = inds(end)+1:inds(end)+n_nz;
                    rowvec(inds) = row_submat(nz_inds);
                    colvec(inds) = (col+nImages-1) * ones(n_nz,1);
                    
                    if any(inds > length(rowvec))
                        keyboard;
                    end
                    
                    col = col + 1;
                end
                
                rows = [rows(:); rowvec(1:inds(end))];
                cols = [cols(:); colvec(1:inds(end))];
            end
    end
end


function [rows, cols] = hessian_elements(var_vec, sz_vec, observationMask, ...
                                         Jrows, Jcols)
nv = sum(sz_vec);
nr = 2*size(Us,1);

J = sparse(Jrows,Jcols, 1, nr,nv);

[rows, cols] = find(J'*J);

return


%% Test function
function test()
clc;
clear all;

[variables, observations, var_vec, sz_vec] = create_dummy_variables();

% Clear the persistents first
brightness_error_vec([],[],[], true);

[res, p_test, Jrows, Jcols] = brightness_error_vec(var_vec, sz_vec, observations);

nv = sum(sz_vec);
nr = length(res);

JP = sparse(Jrows,Jcols, 1, nr,nv);
HP = JP'*JP;

figure(1); clf;
    spy(JP);
      
figure(2); clf;
    spy(HP);
    
return
    
% Clear the persistent interpolated derivatives.
interpolate_image_stacks([], [], true);
                                            
imgroot = 'U:\projects\nailfold\synthesis\';

% d = dir(fullfile(imgroot, '*T*')); imgroot = fullfile(imgroot, d(end).name);
% imgroot = fullfile(imgroot, '20130809T170015'); % Steady
imgroot = fullfile(imgroot, '20130809T170109'); % Shaky

nFrames = 40;

gt = load(fullfile(imgroot, '_ground_truth.mat'));

nLevels = 4;
testLevel = 2;

gt.jitter = gt.jitter / (2^(testLevel-1));

imgStack = load_image_stack(imgroot, nFrames);
imgPyramid = build_image_pyramid(imgStack, nLevels);
flowPyramid = build_flow_pyramid(gt.flowStackMean, nLevels);

observations.imgStack = imgPyramid{testLevel};
observations.Q = ones(size(observations.imgStack(:,:,1)));
observations.obsMask = true(size(observations.imgStack));
observations.f = ones(1,nFrames);
observations.penalty = 0;

variables.uu = real(flowPyramid{testLevel});
variables.vv = imag(flowPyramid{testLevel});
variables.uu(isnan(variables.uu)) = 0;
variables.vv(isnan(variables.vv)) = 0;

% profile clear; profile on;
variables.displacements = gt.jitter(2:nFrames, :);
[var_vec, sz_vec] = ncm_pack(variables);
res2 = brightness_error_vec(var_vec, sz_vec, observations);

variables.displacements(:) = 0.0;
[var_vec, sz_vec] = ncm_pack(variables);
res1 = brightness_error_vec(var_vec, sz_vec, observations);

fprintf('With compensation = %f\n', res2'*res2 / length(res2));
fprintf('Without compensation = %f\n', res1'*res1 / length(res1));
% profile off; profile report;


