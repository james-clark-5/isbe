Optimisation Attempts:

Using Matlab's Lcc compiler.

Measurements are areas under the timing curve
and maximum time taken (in secs)

										Area under curve 						Max time

1. Using a macro to perform matrix indexing vs. using a function
		Using Macro:
			Matlab's pinv:					16.9815								3.531
			Optimised:						30.1773								6.4396 <--
		Using a function:
			Matlab's pinv:					16.9958								3.5196
			Optimised:						38.4209								8.2034 <--

Conclusion: Using a macro is faster, as it does not involve a
function call.

2. Using Microsoft's Compiler instead of Matlab's Lcc

		Using Lcc:
			Matlab's pinv:					16.9815								3.531
			Optimised:						30.1773								6.4396 <--
		Using MS's Compiler:
			Matlab's pinv:					16.9909								3.517
			Optimised:						23.8812								4.9632 <--
			
Conclusion: Using Microsoft's Compiler instead of Matlab's is
a good idea and results in a significant speed-up.
			
3. Try inlining the mx functions, by using the -inline flag to MEX.

		No inlining:
			Matlab's pinv:					16.9909								3.517
			Optimised:						23.8812								4.9632
		Inlining:
			Matlab's pinv:					17.0035								3.541
			Optimised:						23.8967								4.9874

Conclusion: Inlining does not seem to make any improvement; in
fact it seems to have a small negative impact on performance.
Do not use inlining.

4. Re-writing so that we only compute half of the matrix, and then
do a copy to get the other half.

		Original (all elements are computed):
			Matlab's pinv:					16.9909								3.517
			Optimised:						23.8812								4.9632 <--
		Optimised:
			Matlab's pinv:					16.9885								3.507
			Optimised:						19.7404								4.092 <--

Conclusion: This modification has a marked effect, but we still need
to make some improvements.

5. Removing the search for the maximum value when computing the tolerance.

		All useful optimisations so far (see point 4)
			Matlab's pinv:					16.9885								3.507
			Optimised:						19.7404								4.092
		Without searching for maximum value:
			Matlab's pinv:					17.067								3.5312
			Optimised:						19.8139								4.1098

Conclusions: This modification makes a small improvement in the performance of the
algorithm that is visible in the graph, but not in these figures. Basically, the modification
makes the MEX implementation faster for the smaller matrix sizes.

6. Almost total re-write. Using the eigendecomposition instead of the the SVD; calling
the eig function from C code, rather than supplying it (or the SVD). Numerous other
improvements. This is now implemented in the pinv_symm.c file.

Conclusion: The results are not as robust as those provided by the SVD, but the code runs
twice as fast. This is particularly significant considering the way the pinv function scales
(exponentially in terms of the size of the matrix). The pseudo-inverse is consistently computed
about twice as fast as Matlab's pinv function. However, I need to determine whether it is
possible to assess the accuracy/robustness of the solutions. I have run the test_gmm_condition
code, and the results seem to be fine. However, this is only 2D -- what happens in higher
dimensions?
