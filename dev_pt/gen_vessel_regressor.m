% build a random forest-based line detector

% profile on; profile clear;
clc; clear; close all hidden;

% profile clear; profile on;

predictor = build_vessel_predictor(...
	'prediction_type', 'boosted_regression', ...
	'decomp_type', 'g2d', ...
	'win_size', 3, ...
	...
	'sampling_method','generate_vessel_data',...
	'sigma_range', [1 2 4 8], ...
	'ori_dir', 'orientations', ...
	'rand_seed', [123456], ...
	'rgb_channel', 'rgb', ... % flatten the image
	'num_samples', 200000, ...
	'pts_per_image', 1000, ...
	'feature_type', 'conj', ...
	'n_trees', 2,...
	'd', [],...
	'minimise_size', 0, ...
	'split_min',10,...
	'split_criterion','dabs',...
	'var_criterion','mabs',...
	'w_prior', 0.0, ...
	'use_nag', ~ispc);

profstat = profile('status');
if strcmp(profstat.ProfilerStatus,'on')
	profile report; profile off;
end

return

if isfield(predictor,'trees')
	figure;
	tree = show_tree_output([]);
	tmp = [tree.var tree.goodness]; [tmp(1:3,:) tmp(1:3,2)./tmp(1:3,3)];

	figure;
	leaves = find(~tree.var);
	hist(1-tree.nodeerr(leaves),0.0:0.01:1);
	xlim([-0.01,1.01]);
end

% test the predictor on a limited dataset (one image)
forest_job = strrep(predictor.tree_dir,'/','');
classify_image_set(forest_job,'synthetic_lines/philtres/onesample',...
	'forest_dir','line_boosted_regression_rfs');

