% build a random forest-based line detector

% profile on; profile clear;
clc; clear; close all hidden;

sample_method = 'generate_training_data'; bg_dir = 'real512/train/';
% sample_method = 'use_saved_training_data';
% sample_method = 'sample_saved_dt_line_data'; bg_dir = 'real512_dt\';

% profile clear; profile on;

% 	'save_training_data', true, ...
% 	'training_data_dir', 'dir', ...
% 	'training_data','filename',...
predictor = build_rf_line_detector(...
	'sampling_method',sample_method,...
	'image_type','line',...
	'detection_type', 'boosted_regression', ...
	'decomp_type', 'g1d',...
	'win_size', 3,...
	'num_levels', 4, ...
	'rand_seed', [123456], ...
	'bg_dir', bg_dir,...
	'bg_fmt', 'mat',...
	'bg_stem', [],...
	'rgb_channel', '', ... % flatten the image
	'num_samples', 200000, ...
	'pts_per_image', 500, ...
	'feature_type', 'conj', ...
	... % forest parameters
	'n_trees', 2,...
	'd', [],...
	'minimise_size', 0, ...
	'split_min',10,...
	'split_criterion','dabs',...
	'var_criterion','mabs',...
	'w_prior', 0.0, ...
	'use_nag', ~ispc);

profstat = profile('status');
if strcmp(profstat.ProfilerStatus,'on')
	profile report; profile off;
end

return

if isfield(predictor,'trees')
	figure;
	tree = show_tree_output([]);
	tmp = [tree.var tree.goodness]; [tmp(1:3,:) tmp(1:3,2)./tmp(1:3,3)];

	figure;
	leaves = find(~tree.var);
	hist(1-tree.nodeerr(leaves),0.0:0.01:1);
	xlim([-0.01,1.01]);
end

% test the predictor on a limited dataset (one image)
forest_job = strrep(predictor.tree_dir,'/','');
classify_image_set(forest_job,'synthetic_lines/philtres/onesample',...
	'forest_dir','line_boosted_regression_rfs');

