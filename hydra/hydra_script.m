% function hydra_script(idx)% Miscellaneous script to submit to Hydra
% 
% 
% mam_list = dir([mberksroot '/ad/*data.mat']);
% 
% for ii = 50*(idx-1)+1:50*idx
%     
%     for g_width = [8 16 32 64]
%         fname = [mberksroot 'ad/directed_sums/' mam_list(ii).name(1:6) '_dir_sum_' zerostr(g_width,3) '_001.mat'];
%         
%         if ~exist(fname, 'file')
% 	
%             load([mberksroot '/ad/' mam_list(ii).name], 'line_ori', 'line_prob');
%             line_ori = imresize(line_ori, 0.5, 'bilinear');
%             line_prob = imresize(line_prob, 0.5, 'bilinear');
% 
%             [angle_bands dist_sum] = radial_line_projection(line_prob, line_ori, [36 1], fspecial('gaussian', [1 5*g_width], g_width)); %#ok
%        		save(fname, 'dist_sum');
%         end
%     end
% end
%%
% contra_pair = u_load([asymmetryroot 'data/contralateral/024RML.mat']);
% map_args.region1 = imresize(contra_pair.abnormal_roi, 0.5, 'bilinear');
% map_args.region2 = imresize(contra_pair.normal_roi, 0.5, 'bilinear');
% map_args.num_samples2 = 1e3;
% map_args.k = 10;
% clear contra_pair; pack;
% dist_map = knn_2_region_map(map_args);
% save([asymmetryroot 'results/knn_maps/024RML_knn_map.mat'], 'dist_map');
% 
% 
%%
% function hydra_script(job_idx)% Miscellaneous script to submit to Hydra
% 
% set(0, 'RecursionLimit', 250);
% 
% random_forest = u_load([mberksroot, 'classification/rf/rf_linop_3_5_8/random_forest.mat']);
% 
% param_dir = 'rf_linop_3_5_8';
% 
% test_dir = [mberksroot, 'classification/data/testimage_contrast1to8_exprnd_sin'];
% prob_dir = [mberksroot, 'classification/data/testimage_contrast1to8_exprnd_sin/probability_images/'];
% mkdir([prob_dir param_dir]);
% 
% for ii = (1:10) + (job_idx-1)*10
%     test_image = load([test_dir '/image' zerostr(ii,3) '.mat']);
% 
%     %Levels 1, min wave length 1, Onf 0.65
%     prob_im = classify_image_linop(...
%         'image_in', test_image.image,...
%         'forest', random_forest,...
%         'forest_type', 'isbe',...
%         'num_levels', 5,...
%         'win_size', 3);
%     save([prob_dir param_dir '/probability_image' zerostr(ii,3) '.mat'], 'prob_im');
% 
% end
% %%
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
% function hydra_script(idx)% Miscellaneous script to submit to Hydra
% 
% mam_list = dir([mberksroot 'new_CAD/2004_normals_half/*.mat']);
% for ii = 20*(idx-1)+1:20*idx
%     %load mammo 001LCC is good...
%     mammogram = u_load([mberksroot 'new_CAD/2004_normals_half/' mam_list(ii).name]);
% 
%     %load segmentation
%     segmentation = u_load([mberksroot 'segmentation/2004_normals/' mam_list(ii).name(1:6) '_segmentation.mat']);
% 
%     %resize segmentation and create mask
%     [breast_border] = segment_breast_resize(size(mammogram), segmentation);
%     mask = roipoly(mammogram, breast_border(:,1), breast_border(:,2));
% 
%     %Compute line strength
%     class_forest = u_load([mberksroot 'classification/rf/DTCWT_rf_fulltrees_W3L5/random_forest.mat']);
%     line_prob = classify_image(...
%         'image_in', mammogram,...
%         'forest', class_forest,...
%         'forest_type', 'isbe',...
%         'num_levels', 5,...
%         'mask', mask);
%     save([mberksroot 'ad/line_maps/' mam_list(ii).name(1:6) '_data.mat'], 'line_prob');
% 
%     %Compute orientation
%     reg_forest = u_load([mberksroot 'classification/rf/rf_reg_ori_02_trees/rf_reg_ori_02.mat']);
%     line_ori = classify_image(...
%         'image_in', mammogram,...
%         'forest', reg_forest,...
%         'forest_type', 'regression',...
%         'num_levels', 5,...
%         'mask', mask);
%     save([mberksroot 'ad/orientation_maps/' mam_list(ii).name(1:6) '_data.mat'], 'line_ori');
%     
%     %[angle_bands] = radial_line_projection(line_prob, line_ori, [36 1]); %#ok
%     %save([mberksroot 'ad/orientation_maps/' mam_list(ii).name(5:10) '_data.mat'], 'line*', 'angle_bands');
% end
%%
%--------------------------------------------------------------------------
% con_list = dir([asymmetryroot 'data/mammograms/2004_screening/abnormals/mat/*.mat']);
% 
% for ii = 1:length(con_list)
% 
%     l_name = [asymmetryroot 'data/line_detection_maps/2004_screening/abnormals/' con_list(ii).name(5:10) '_data.mat'];
%     o_name = [asymmetryroot 'data/orientation_maps/2004_screening/abnormals/' con_list(ii).name(5:10) '_data.mat'];
%     
%     if ~exist(l_name, 'file')
%         display([l_name ' ' o_name]);
%         
%         %load mammo 001LCC is good...
%         mammogram = u_load([asymmetryroot 'data/mammograms/2004_screening/abnormals/mat/' con_list(ii).name]);
% 
%         %load segmentation
%         segmentation = u_load([asymmetryroot 'data/segmentations/2004_screening/abnormals/' con_list(ii).name(1:10) '_segmentation.mat']);
% 
%         %resize segmentation and create mask
%         [breast_border] = segment_breast_resize(size(mammogram), segmentation);
%         mask = roipoly(mammogram, breast_border(:,1), breast_border(:,2));
% 
%         %Compute line strength
%         class_forest = u_load([mberksroot 'classification/rf/DTCWT_rf_fulltrees_W3L5/random_forest.mat']);
%         line_prob = classify_image(...
%             'image_in', mammogram,...
%             'forest', class_forest,...
%             'forest_type', 'isbe',...
%             'num_levels', 5,...
%             'mask', mask);
%         save(l_name, 'line_prob');
% 
%         %Compute orientation
%         reg_forest = u_load([mberksroot 'classification/rf/rf_reg_ori_02_trees/rf_reg_ori_02.mat']);
%         line_ori = classify_image(...
%             'image_in', mammogram,...
%             'forest', reg_forest,...
%             'forest_type', 'regression',...
%             'num_levels', 5,...
%             'mask', mask);
%         save(o_name, 'line_ori');
%         clear line_*
%     end    
% end
%%
load([asymmetryroot, 'experiments/spicule_classification/experiment_data.mat']);
level = 5;
for win_size = [1 3]
    mass_list = dir([mberksroot, 'image_data/masses512x512/*.mat']);
    norm_list = dir([mberksroot, 'image_data/normal_512/*.mat']);

    mass_data = sample_spicule_training_data_g2d(...
        'image_dir', [mberksroot, 'image_data/masses512x512/'],...
        'image_sample_pts', spicule_sample_pts,...
        'image_list', mass_list,...
        'sigma_range', [1 2 4 8 16],...
        'win_size', win_size,...
        'plot', 0);

    norm_data = sample_spicule_training_data_g2d(...
        'image_dir', [mberksroot, 'image_data/normal_512/'],...
        'image_sample_pts', normal_sample_pts,...
        'image_list', norm_list,...
        'sigma_range', [1 2 4 8 16],...
        'win_size', win_size,...
        'plot', 0);

    save([mberksroot, 'classification/data/spicules/exp_samples_g2d_', num2str(win_size), '_all_', num2str(level), '.mat'], 'mass_data', 'norm_data', 'spic_pts_cumsum', 'norm_pts_cumsum');
    display(['Created and saved data for level ', num2str(level)]);
    
%     mass_data = sample_spicule_training_data_monogenic(...
%         'image_dir', [mberksroot, 'image_data/masses512x512/'],...
%         'image_sample_pts', spicule_sample_pts,...
%         'image_list', mass_list,...
%         'num_levels', level,...
%         'win_size', win_size,...
%         'plot', 0);
% 
%     norm_data = sample_spicule_training_data_monogenic(...
%         'image_dir', [mberksroot, 'image_data/normal_512/'],...
%         'image_sample_pts', normal_sample_pts,...
%         'image_list', norm_list,...
%         'num_levels', level,...
%         'win_size', win_size,...
%         'plot', 0);
% 
%     save([mberksroot, 'classification/data/spicules/exp_samples_monogenic_', num2str(win_size), '_all_', num2str(level), '.mat'], 'mass_data', 'norm_data', 'spic_pts_cumsum', 'norm_pts_cumsum');
%     display(['Created and saved data for level ', num2str(level)]);
% 
%     mass_data = sample_spicule_training_data_linop(...
%         'image_dir', [mberksroot, 'image_data/masses512x512/'],...
%         'image_sample_pts', spicule_sample_pts,...
%         'image_list', mass_list,...
%         'num_levels', level,...
%         'do_max', 0,...
%         'win_size', win_size,...
%         'plot', 0);
% 
%     norm_data = sample_spicule_training_data_linop(...
%         'image_dir', [mberksroot, 'image_data/normal_512/'],...
%         'image_sample_pts', normal_sample_pts,...
%         'image_list', norm_list,...
%         'num_levels', level,...
%         'do_max', 0,...
%         'win_size', win_size,...
%         'plot', 0);
% 
%     save([mberksroot, 'classification/data/spicules/exp_samples_linop_', num2str(win_size), '_all_', num2str(level), '.mat'], 'mass_data', 'norm_data', 'spic_pts_cumsum', 'norm_pts_cumsum');
%     display(['Created and saved data for level ', num2str(level)]);
%     
%     mass_data = sample_spicule_training_data(...
%         'image_dir', [mberksroot, 'image_data/masses512x512/'],...
%         'image_sample_pts', spicule_sample_pts,...
%         'image_list', mass_list,...
%         'num_levels', level,...
%         'do_max', 0,...
%         'win_size', win_size,...
%         'plot', 0);
% 
%     norm_data = sample_spicule_training_data(...
%         'image_dir', [mberksroot, 'image_data/normal_512/'],...
%         'image_sample_pts', normal_sample_pts,...
%         'image_list', norm_list,...
%         'num_levels', level,...
%         'do_max', 0,...
%         'win_size', win_size,...
%         'plot', 0);
% 
%     save([mberksroot, 'classification/data/spicules/exp_samples_dt_', num2str(win_size), '_all_', num2str(level), '.mat'], 'mass_data', 'norm_data', 'spic_pts_cumsum', 'norm_pts_cumsum');
%     display(['Created and saved data for level ', num2str(level)]);

end
%%
%%
% load([mberksroot, 'classification/data/spicules/experiment_samples.mat']);
% display('Reloaded data and building forest');
% random_forest = mb_random_forest_class_train_boot(...
%     'X', [mass_data; norm_data],...
%     'y', [true(size(mass_data,1),1); false(size(norm_data,1),1)],...
%     'n_trees', 200,...
%     'do_oob', 1,...
%     'do_oob_trace', 1);    
% save([mberksroot, 'classification/data/spicules/rf_all_data_3_6_all.mat'], 'random_forest');


%--------------------------------------------------------------------------
% mkdir([mberksroot 'classification/data/normal_512_orientation/'])
% load([mberksroot 'classification/rf_reg_ori.mat']) 
% 
% for ii = 67:89
%     
%     %load in norm
%     norm_roi = u_load([mberksroot 'image_data/normal_512/bg', zerostr(ii,3), '.mat']);
% 
%     %compute line orientations
%     [norm_roi_orientation] = classify_image(...
%         'image_in', norm_roi,...
%         'forest', random_forest,...
%         'forest_type', 'regression',...
%         'num_levels', 5);
%     
%     save([mberksroot 'classification/data/normal_512_orientation/norm_orientation', zerostr(ii,3), '.mat'], 'norm_roi_orientation');
%     clear norm_*
% end
%--------------------------------------------------------------------------
% sampling_method_args.num_samples = 2e5;
% sampling_method_args.image_dir = [mberksroot, 'classification/data/bg+bar_128/'];
% sampling_method_args.total_samples = 128*128*160;
% 
% forest_args.sampling_method = 'sample_image_training_data';
% forest_args.sampling_method_args = sampling_method_args;
% forest_args.d = 10;
% forest_args.n_trees = 20;
% forest_args.tree_dir = [mberksroot, 'classification/rf/rf_20'];
% %profile on;
% [random_forest] = mb_random_forest_class_train(forest_args);
% %profsave(profile('info'),[mberksroot
% 'classification/random_forests/code_profiles/my_rf_code1']);