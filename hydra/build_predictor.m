function predictor = build_predictor(varargin)
%BUILD_PREDICTOR wrapper function to build a predictor (i.e. a regressor or
%classifier) for image data. The function is deliberately general to allow
%use with a wide range of image data, and designed to be used on local
%machines and remote unix-based computing clusters
%   [] = build_predictor(input_args)
%
% BUILD_PREDICTOR uses the U_PACKARGS interface function
% and so arguments to the function may be passed as name-value pairs
% or as a struct with fields with corresponding names.
%
%
% Outputs: predictor
%
% Example: Usage on hydra with qsub to build a random forest
%   NUM_TREES=20 NUM_BGS=1000 NUM_SAMPLES=200000 WIN_SIZE=1 qsub -N rf_line -t 1:10 -V matlab_code/trunk/hydra/build_predictor.sh                              Your job-array 191656.1-10:1 ("rf_line") has been submitted
%   FOREST_JOB="'191656'" qsub -N comb -hold_jid 191656 -V matlab_code/trunk/hydra/combine_hydra_rfs.sh
%
% Notes:
%
% See also:
%
% Created: 03-Aug-2010
% Author: Michael Berks 
% Email : michael.berks@postgrad.man.ac.uk 
% Phone : +44 (0)161 275 1241 
% Copyright: (C) University of Manchester

%OK, there's some jiggery-pokery here to allow for optional setting of
%default variables through a unix shell (i.e. when running on hydra)

warning('off', 'ASYM:unexpectedArgument');

%% use varargin to merge default argument values with user set values

% this now uses the utils/unixenv function that takes the key name of the
% environment variable and returns its corresponding value, returning the
% default value if the environment variable does not exist
%   e.g. envval = unixenv('ENVVARNAME',default_val);

args = u_packargs(varargin,... % the user's input
    '0', ... % non-strict mode
    'predictor_name',       unixenv('PREDICTOR_NAME','predictor'), ...
    'task_id',				unixenv('SGE_TASK_ID',1), ...
    'job_id',				unixenv('JOB_ID',['pc',datestr(now,'yyyymmddTHHMMSS')]), ...
    ... % Folders
    'image_root',           [unixenv('DATA_ROOT',[]) unixenv('IMAGE_ROOT', [asymmetryroot,'data/retinograms/DRIVE/training'])],...
    'model_root',           [unixenv('DATA_ROOT',[]) unixenv('MODEL_ROOT', [asymmetryroot,'data/models/vessel'])], ...
	... % Output parameters
    'output_type',          unixenv('OUTPUT_TYPE', 'width'), ...
	... % Sampling parameters
    'num_samples',			unixenv('NUM_SAMPLES',1000), ...
    'max_n_images',         unixenv('MAX_N_IMAGES',[]), ...
    'shift_images',         unixenv('SHIFT_IMAGES',false), ...
    'bg_ratio',				unixenv('BG_RATIO',1), ...
    'replace_sample',       unixenv('REPLACE_SAMPLE', false), ...
    'sampling_method',      unixenv('SAMPLING_METHOD','generate_training_data'), ...
    'shrink_fov',           unixenv('SHRINK_FOV',false), ...
    'image_type', 			unixenv('IMAGE_TYPE','real'), ...
        ... % Image synthesis parameters
        'pts_per_image',		unixenv('PTS_PER_IMAGE',500), ...
        'bg_type',				unixenv('BG_TYPE','flat'), ...
        'bg_size',				unixenv('BG_SIZE',[64 64]), ...
        'bg_stem',				unixenv('BG_STEM','bg'), ...
        'num_bgs',				unixenv('NUM_BGS',100), ...
        'bg_zeros',				unixenv('BG_ZEROS',5), ...
        'bg_dir',				[unixenv('DATA_ROOT',[]) unixenv('BG_DIR','real512/train/')], ...
        'bg_fmt',				unixenv('BG_FMT','mat'), ...
        'bg_mask_dir',          unixenv('MASK_DIR',[]), ...
        'orientation_range',    unixenv('ORIENTATION_RANGE',[0 180]), ...
        'width_range', 			unixenv('WIDTH_RANGE',[1 8]), ...
        'contrast_range',       unixenv('CONTRAST_RANGE',[1 8]), ...
        'decay_rate', 			unixenv('DECAY_RATE',0), ...
        'line_type',			unixenv('BAR_TYPE','ellipse'), ...
        'noise_type',           unixenv('NOISE_TYPE',[]), ...
        'noise_params',         unixenv('NOISE_PARAMS', 0), ...
        ... % Image sampling parameters
        'image_dir',            unixenv('IMAGE_DIR', 'images'),...
        'fov_mask_dir',         unixenv('FOV_MASK_DIR', 'fov_masks'),...
        'fg_mask_dir',          unixenv('FG_MASK_DIR', 'vessel_masks'),...
        'prediction_dir',       unixenv('PREDICTION_DIR', 'predictions'),...
        'probability_dir',      unixenv('PROBABILITY_DIR', ''),...
        'class_label_dir',          unixenv('CLASS_DIR', []),...
        'ori_dir',              unixenv('ORI_DIR', 'orientations'),...
        'width_dir',            unixenv('WIDTH_DIR', 'width_maps'), ...
        'make_resampling_maps',          unixenv('MAKE_RESAMPLING_MAPS', 0.5), ...
        'precompute_indices', unixenv('PRECOMPUTE_INDICES', []),...
        ... % Saved training data parameters
        'save_training_data',	unixenv('SAVE_TRAINING_DATA',false), ...
        'training_data_dir', 	unixenv('TRAINING_DATA_DIR','saved_training_data'), ...
        'training_data',		unixenv('TRAINING_DATA',''), ... % ???
        'training_labels',		unixenv('TRAINING_LABELS',''), ... % ???
	... % Image feature/decomposition parameters
    'num_levels', 			unixenv('NUM_LEVELS',1), ...
    'rgb_channel',          unixenv('RGB_CHANNEL','rgb'), ...
    'normalise', 			unixenv('NORMALISE',0), ...
    'win_size',				unixenv('WIN_SIZE',1), ...
    'pca_filename',         unixenv('PCA_FILENAME',[]), ...
    'do_max',				unixenv('DO_MAX',false), ...
    'rotate',				unixenv('ROTATE',false), ...
    'decomp_type', 			unixenv('DECOMP_TYPE','dt'), ...
        ... % DTCWT parameters
        'feature_shape', 		unixenv('FEATURE_SHAPE','rect'), ...
        'feature_type',			unixenv('FEATURE_TYPE','conj'), ...
        ... % Gaussian derivative parameters
        'sigma_range', 			unixenv('SIGMA_RANGE',[1,2,4,8]), ...
        ... % LinOp parameters
        'num_angles', 			unixenv('NUM_ANGLES',8), ...
        ... % Monogenic parameters
        'min_wavelength',		unixenv('MIN_WAVELENGTH',4), ...
        'onf',					unixenv('ONF',0.65), ...
        ... % Raw pixel parameters
        'subtract_mean',		unixenv('SUBTRACT_MEAN',true), ...
    ... % Predictor parameters
    'prediction_type',		unixenv('PREDICTION_TYPE','boosted_regression'), ...
        ... % Tree/Forest parameters
        'n_trees',				unixenv('NUM_TREES',2), ...
        'split_criterion_c',    unixenv('SPLIT_CRITERION_C','gdi'),...
        'split_criterion_r',    unixenv('SPLIT_CRITERION_R','ssq'),...
        'var_criterion_c',		unixenv('VAR_CRITERION_C','mabs'),...
        'var_criterion_r',		unixenv('VAR_CRITERION_R','ssq'),...
        'split_min',			unixenv('SPLIT_MIN',10), ...
        'end_cut_min',			unixenv('END_CUT_MIN',1), ...
        'do_ubound',			unixenv('DO_UBOUND',1), ...
        'do_circular',			unixenv('DO_CIRCULAR',[]), ...
        'w_prior',				unixenv('W_PRIOR',0), ...
        'impure_thresh',		unixenv('IMPURE_THRESH',1e-4), ...
        'minimise_size',		unixenv('MINIMIZE_TREE',0), ...
        'd',                    unixenv('d',[]), ...
        'quiet',                unixenv('QUIET', 0),...
        ... % Boosted predictor arguments
        'boost_n_levels',       unixenv('BOOST_N_LEVELS', 100), ...
        'boost_weak_learner',   unixenv('BOOST_WEAK_LEARNER','piecewise_constant'), ...
        'boost_output_type',    unixenv('BOOST_OUTPUT_TYPE','raw'), ...
        'boost_n_bins',         unixenv('BOOST_N_BINS', 24), ...
        'boost_shrinkage',      unixenv('BOOST_SHRINKAGE', 0.05), ...
    ... % Miscellaneous parameters
    'overwrite',			unixenv('OVERWRITE',false), ...
    'use_nag',				unixenv('USE_NAG',false),...
    'rand_seed',			unixenv('RAND_SEED',[]) ...
);

close_all_timebars();

% if $CUSTOM_ID is defined and not empty then use that instead of $JOB_ID
custom_id = unixenv('CUSTOM_ID');
if ~isempty(custom_id)
    if isnumeric(custom_id)
        custom_id = num2str(custom_id);
    end
	args.job_id = custom_id;
end

if strcmp(get_username(),'ptresadern') && ispc
    args.use_nag = false;
end

% Reseed randomizers
seed_randomizers(args);


%% copy arguments for sampling

% Add arguments that depend on the image decomposition (inputs), sampling
% method, what we want to predict (outputs), and how we want to predict it.
job_args = [];
job_args.decomposition_args = get_decomposition_args_from(args);
job_args.sampling_args = get_sampling_args_from(args);
job_args.sampling_args = get_output_args_from(args, job_args.sampling_args);
job_args.predictor_args = get_predictor_args_from(args);

%This is messy, but the sampling args needs to know the model path from the
%predictor args so it can save info on what data was sampled in the model
%dir
job_args.sampling_args.sampled_data_dir = job_args.predictor_args.sampled_data_dir; 

%Clear the args structure and display the sampling/forest args
display(job_args.sampling_args);
display(job_args.predictor_args);
display(job_args.decomposition_args);

% For the first task of job, save the sampling args
if ~exist([job_args.predictor_args.model_dir], 'dir');
    mkdir([job_args.predictor_args.model_dir]);
end
args_name = [job_args.predictor_args.model_dir '/job_args.mat'];
if ~exist(args_name, 'file');
    save(args_name, 'job_args');
end

% For the first task of job, dump the username, forest arguments and
% sampling arguments to a text file.
args_name = [job_args.predictor_args.model_dir '/args.txt'];
if ~exist(args_name, 'file');
    fid = fopen(args_name,'w');
	fprintf(fid,'User = %s\n',get_username());
    predictor_args = job_args.predictor_args;
	fprintf(fid,'%s\n',evalc('predictor_args'));
    sampling_args = job_args.sampling_args;
	fprintf(fid,'%s\n',evalc('sampling_args'));
    decomposition_args = job_args.decomposition_args;
	fprintf(fid,'%s\n',evalc('decomposition_args'));
	fclose(fid);
end

% Build predictor
switch job_args.predictor_args.prediction_type
    case {'rf_classification'}
        rf_args = job_args.predictor_args;
        rf_args.sampling_args = job_args.sampling_args;
        rf_args.decomposition_args = job_args.decomposition_args;
		predictor = random_forest_class_train(rf_args);
        
    case {'linear_regression'}
		predictor = linear_regressor_train(job_args);

	case {'logistic_regression'}
		predictor = logistic_regressor_train(job_args);
        
    case {'boosted_regression'}
    	predictor = boosted_regressor_train(job_args);

	case {'rf_regression'}
        rf_args = job_args.predictor_args;
        rf_args.sampling_args = job_args.sampling_args;
        rf_args.decomposition_args = job_args.decomposition_args;
		predictor = random_forest_reg_train(rf_args);

    otherwise
        error(['Prediction type ', job_args.predictor_args.prediction_type, ...
               'not recognized']);
end

display('Predictor successfully constructed!');
warning('on', 'ASYM:unexpectedArgument');
